<launch>

  <!-- args corresponding to environment variables -->
  <arg name="RUN_TYPE" default="$(env RUN_TYPE)" />
  <arg name="UAV_TYPE" default="$(env UAV_TYPE)" />
  <arg name="ODOMETRY_TYPE" default="$(env ODOMETRY_TYPE)" />
  <arg name="PROPULSION_TYPE" default="$(env PROPULSION_TYPE)" />
  <arg name="PROFILER" default="$(optenv PROFILER false)" />
  <arg name="UAV_NAME" default="$(env UAV_NAME)" />
  <arg name="BODY_DISTURBANCE_X" default="$(optenv INITIAL_DISTURBANCE_X 0.0)" />
  <arg name="BODY_DISTURBANCE_Y" default="$(optenv INITIAL_DISTURBANCE_Y 0.0)" />
  <arg name="WORLD_FILE" default="$(optenv WORLD_FILE)" />
  <arg name="WORLD_NAME" default="$(optenv WORLD_NAME)" />

    <!-- other args -->
  <arg name="standalone" default="true" />
  <arg name="debug" default="false" />
  <arg name="custom_config" default="" />

    <!-- custom configs for trackers -->
  <arg name="custom_config_csv_tracker" default="" />
  <arg name="custom_config_joy_bumper_tracker" default="" />
  <arg name="custom_config_joy_tracker" default="" />
  <arg name="custom_config_landoff_tracker" default="" />
  <arg name="custom_config_line_tracker" default="" />
  <arg name="custom_config_matlab_tracker" default="" />
  <arg name="custom_config_speed_tracker" default="" />
  <arg name="custom_config_mpc_tracker" default="" />
  <arg name="custom_config_uav_names" default="" />

    <!-- custom configs for controllers -->
  <arg name="custom_config_acceleration_controller" default="" />
  <arg name="custom_config_attitude_controller" default="" />
  <arg name="custom_config_failsafe_controller" default="" />
  <arg name="custom_config_mpc_controller" default="" />
  <arg name="custom_config_emergency_controller" default="" />
  <arg name="custom_config_nsf_controller" default="" />
  <arg name="custom_config_so3_controller" default="" />
  <arg name="custom_config_partial_landing_controller" default="" />

  <arg if="$(eval arg('WORLD_FILE') == '' and arg('WORLD_NAME') != '')" name="world_file" value="$(find mrs_general)/config/world_$(env WORLD_NAME).yaml" />
  <arg if="$(eval arg('WORLD_FILE') == '' and arg('WORLD_NAME') == '' and arg('RUN_TYPE') == 'simulation')" name="world_file" value="$(find mrs_general)/config/world_simulation.yaml" />
  <arg if="$(eval arg('WORLD_FILE') != '')" name="world_file" value="$(arg WORLD_FILE)" />

  <arg if="$(eval arg('RUN_TYPE') == 'simulation' and arg('UAV_TYPE') == 't650')" name="UAV_MASS" default="3.5" />
  <arg if="$(eval arg('RUN_TYPE') == 'simulation' and arg('UAV_TYPE') == 'f550')" name="UAV_MASS" default="3.0" />
  <arg if="$(eval arg('RUN_TYPE') == 'simulation' and arg('UAV_TYPE') == 'f450')" name="UAV_MASS" default="2.3" />
  <arg if="$(eval arg('RUN_TYPE') == 'uav')" name="UAV_MASS" default="$(env UAV_MASS)" />

  <arg name="motor_params_file" default="$(find mrs_controllers)/config/$(arg RUN_TYPE)/$(arg UAV_TYPE)/motor_params_$(arg PROPULSION_TYPE).yaml" />
  <arg name="g" default="9.8" />

  <arg     if="$(arg debug)" name="launch_prefix" value="debug_roslaunch" />
  <arg unless="$(arg debug)" name="launch_prefix" value="" />

  <arg     if="$(eval arg('standalone') or arg('debug'))" name="nodelet" value="standalone" />
  <arg unless="$(eval arg('standalone') or arg('debug'))" name="nodelet" value="load" />
  <arg     if="$(eval arg('standalone') or arg('debug'))" name="nodelet_manager" value="" />
  <arg unless="$(eval arg('standalone') or arg('debug'))" name="nodelet_manager" value="$(arg UAV_NAME)_nodelet_manager" />

  <group ns="$(arg UAV_NAME)">

    <!-- Control manager -->
    <node pkg="nodelet" type="nodelet" name="control_manager" args="$(arg nodelet) mrs_uav_manager/ControlManager $(arg nodelet_manager)" output="screen" launch-prefix="$(arg launch_prefix)">

      <!-- Load the default param files -->
      <rosparam file="$(find mrs_uav_manager)/config/default/control_manager.yaml" />
      <rosparam file="$(find mrs_uav_manager)/config/default/trackers.yaml" />
      <rosparam file="$(find mrs_uav_manager)/config/default/controllers.yaml" />

        <!-- Load the particular param files -->
      <rosparam file="$(find mrs_uav_manager)/config/$(arg RUN_TYPE)/$(arg UAV_TYPE)/control_manager.yaml" />
      <rosparam file="$(find mrs_uav_manager)/config/$(arg RUN_TYPE)/$(arg UAV_TYPE)/trackers.yaml" />
      <rosparam file="$(find mrs_uav_manager)/config/$(arg RUN_TYPE)/$(arg UAV_TYPE)/controllers.yaml" />

      <rosparam file="$(arg world_file)" />
      <rosparam file="$(arg motor_params_file)" />

      <!-- Load a user param file -->
      <rosparam if="$(eval not arg('custom_config') == '')" file="$(arg custom_config)" />

      <param name="enable_profiler" type="bool" value="$(arg PROFILER)" />
      <param name="uav_name" type="string" value="$(arg UAV_NAME)" />
      <param name="g" value="$(arg g)" />
      <param name="uav_mass" value="$(arg UAV_MASS)" />
      <param name="body_disturbance_x" value="$(arg BODY_DISTURBANCE_X)" />
      <param name="body_disturbance_y" value="$(arg BODY_DISTURBANCE_Y)" />

      <!-- Controller's configs -->

      <!-- NSF -->
      <rosparam ns="nsf_controller" file="$(find mrs_controllers)/config/default/nsf.yaml" />
      <rosparam ns="nsf_controller" file="$(find mrs_controllers)/config/$(arg RUN_TYPE)/$(arg UAV_TYPE)/nsf.yaml" />
      <rosparam if="$(eval not arg('custom_config_nsf_controller') == '')" ns="nsf_controller" file="$(arg custom_config_nsf_controller)" />
      <param name="nsf_controller/enable_profiler" type="bool" value="$(arg PROFILER)" />
      <remap from="~nsf_controller/profiler" to="profiler" />

      <!-- SO3 -->
      <rosparam ns="so3_controller" file="$(find mrs_controllers)/config/default/so3.yaml" />
      <rosparam ns="so3_controller" file="$(find mrs_controllers)/config/$(arg RUN_TYPE)/$(arg UAV_TYPE)/so3.yaml" />
      <rosparam if="$(eval not arg('custom_config_so3_controller') == '')" ns="so3_controller" file="$(arg custom_config_so3_controller)" />
      <param name="so3_controller/enable_profiler" type="bool" value="$(arg PROFILER)" />
      <remap from="~so3_controller/profiler" to="profiler" />

      <!-- MPC controller -->
      <rosparam ns="mpc_controller" file="$(find mrs_controllers)/config/default/mpc.yaml" />
      <rosparam ns="mpc_controller" file="$(find mrs_controllers)/config/$(arg RUN_TYPE)/$(arg UAV_TYPE)/mpc.yaml" />
      <rosparam if="$(eval not arg('custom_config_mpc_controller') == '')" ns="mpc_controller" file="$(arg custom_config_mpc_controller)" />
      <param name="mpc_controller/enable_profiler" type="bool" value="$(arg PROFILER)" />
      <remap from="~mpc_controller/profiler" to="profiler" />
      <remap from="~mpc_controller/set_integral_terms_in" to="~mpc_controller/set_integral_terms" />

      <!-- Acceleration Controller -->
      <rosparam ns="acceleration_controller" file="$(find mrs_controllers)/config/default/acceleration.yaml" />
      <rosparam ns="acceleration_controller" file="$(find mrs_controllers)/config/$(arg RUN_TYPE)/$(arg UAV_TYPE)/acceleration.yaml" />
      <rosparam if="$(eval not arg('custom_config_acceleration_controller') == '')" ns="acceleration_controller" file="$(arg custom_config_acceleration_controller)" />
      <param name="acceleration_controller/enable_profiler" type="bool" value="$(arg PROFILER)" />
      <remap from="~acceleration_controller/profiler" to="profiler" />

      <!-- Attitude controller -->
      <rosparam ns="attitude_controller" file="$(find mrs_controllers)/config/default/attitude.yaml" />
      <rosparam ns="attitude_controller" file="$(find mrs_controllers)/config/$(arg RUN_TYPE)/$(arg UAV_TYPE)/attitude.yaml" />
      <rosparam if="$(eval not arg('custom_config_attitude_controller') == '')" ns="attitude_controller" file="$(arg custom_config_attitude_controller)" />
      <param name="attitude_controller/enable_profiler" type="bool" value="$(arg PROFILER)" />
      <remap from="~attitude_controller/profiler" to="profiler" />

      <!-- Partial landing controller -->
      <rosparam ns="partial_landing_controller" file="$(find mrs_controllers)/config/default/partial_landing.yaml" />
      <rosparam ns="partial_landing_controller" file="$(find mrs_controllers)/config/$(arg RUN_TYPE)/$(arg UAV_TYPE)/partial_landing.yaml" />
      <rosparam if="$(eval not arg('custom_config_attitude_controller') == '')" ns="partial_landing_controller" file="$(arg custom_config_partial_landing_controller)" />
      <param name="partial_landing_controller/enable_profiler" type="bool" value="$(arg PROFILER)" />
      <remap from="~partial_landing_controller/profiler" to="profiler" />

      <!-- Failsafe controller -->
      <rosparam ns="failsafe_controller" file="$(find mrs_controllers)/config/default/failsafe.yaml" />
      <rosparam ns="failsafe_controller" file="$(find mrs_controllers)/config/$(arg RUN_TYPE)/$(arg UAV_TYPE)/failsafe.yaml" />
      <rosparam if="$(eval not arg('custom_config_failsafe_controller') == '')" ns="failsafe_controller" file="$(arg custom_config_failsafe_controller)" />
      <param name="failsafe_controller/enable_profiler" type="bool" value="$(arg PROFILER)" />
      <remap from="~failsafe_controller/profiler" to="profiler" />
      <remap from="~failsafe_controller/arm_out" to="~/arm" />

      <!-- Emergency controller -->
      <rosparam ns="emergency_controller" file="$(find mrs_controllers)/config/default/mpc.yaml" />
      <rosparam ns="emergency_controller" file="$(find mrs_controllers)/config/default/emergency.yaml" />
      <rosparam ns="emergency_controller" file="$(find mrs_controllers)/config/$(arg RUN_TYPE)/$(arg UAV_TYPE)/emergency.yaml" />
      <rosparam if="$(eval not arg('custom_config_emergency_controller') == '')" ns="emergency_controller" file="$(arg custom_config_emergency_controller)" />
      <param name="emergency_controller/enable_profiler" type="bool" value="$(arg PROFILER)" />
      <remap from="~emergency_controller/profiler" to="profiler" />
      <remap from="~emergency_controller/set_integral_terms_in" to="~emergency_controller/set_integral_terms" />

      <!-- Trackers' configs -->

      <!-- LineTracker -->
      <rosparam ns="line_tracker" file="$(find mrs_trackers)/config/default/line_tracker.yaml" />
      <rosparam ns="line_tracker" file="$(find mrs_trackers)/config/$(arg RUN_TYPE)/$(arg UAV_TYPE)/line_tracker.yaml" />
      <rosparam if="$(eval not arg('custom_config_line_tracker') == '')" ns="line_tracker" file="$(arg custom_config_line_tracker)" />
      <param name="line_tracker/enable_profiler" type="bool" value="$(arg PROFILER)" />
      <remap from="~line_tracker/profiler" to="profiler" />
      
      <!-- WallTracker -->
      <rosparam ns="wall_tracker" file="$(find wall)/config/default/wall_tracker.yaml" />
      <rosparam ns="wall_tracker" file="$(find wall)/config/$(arg RUN_TYPE)/$(arg UAV_TYPE)/wall_tracker.yaml" />
      <param name="wall_tracker/enable_profiler" type="bool" value="$(arg PROFILER)" />
      <param name="wall_tracker/uav_name" value="$(arg UAV_NAME)" />
      <remap from="~wall_tracker/set_gains_out" to="gain_manager/set_gains" />
      <remap from="~wall_tracker/set_integral_out" to="~mpc_controller/set_integral_terms" />
      <remap from="~wall_tracker/profiler" to="profiler" />

      <!-- WallTracker -->
      <rosparam ns="wall_tracker" file="$(find wall)/config/default/wall_tracker.yaml" />
      <rosparam ns="wall_tracker" file="$(find wall)/config/$(arg RUN_TYPE)/$(arg UAV_TYPE)/wall_tracker.yaml" />
      <param name="wall_tracker/enable_profiler" type="bool" value="$(arg PROFILER)" />
      <param name="wall_tracker/uav_name" value="$(arg UAV_NAME)" />
      <remap from="~wall_tracker/set_gains_out" to="gain_manager/set_gains" />
      <remap from="~wall_tracker/set_integral_out" to="~mpc_controller/set_integral_terms" />
      <remap from="~wall_tracker/profiler" to="profiler" />

      <!-- JoyTracker -->
      <rosparam ns="joy_tracker" file="$(find mrs_trackers)/config/default/joy_tracker.yaml" />
      <rosparam ns="joy_tracker" file="$(find mrs_trackers)/config/$(arg RUN_TYPE)/$(arg UAV_TYPE)/joy_tracker.yaml" />
      <rosparam if="$(eval not arg('custom_config_joy_tracker') == '')" ns="joy_tracker" file="$(arg custom_config_joy_tracker)" />
      <param name="joy_tracker/enable_profiler" type="bool" value="$(arg PROFILER)" />
      <remap from="~joy_tracker/profiler" to="profiler" />
      <remap from="~joy_tracker/joystick_in" to="/joy" />

      <!-- JoyBumperTracker -->
      <rosparam ns="joy_bumper_tracker" file="$(find mrs_trackers)/config/default/joy_bumper_tracker.yaml" />
      <rosparam ns="joy_bumper_tracker" file="$(find mrs_trackers)/config/$(arg RUN_TYPE)/$(arg UAV_TYPE)/joy_bumper_tracker.yaml" />
      <rosparam if="$(eval not arg('custom_config_joy_bumper_tracker') == '')" ns="joy_bumper_tracker" file="$(arg custom_config_joy_bumper_tracker)" />
      <param name="joy_bumper_tracker/enable_profiler" type="bool" value="$(arg PROFILER)" />
      <remap from="~joy_bumper_tracker/profiler" to="profiler" />
      <remap from="~joy_bumper_tracker/joystick_in" to="/joy" />
      <remap from="~joy_bumper_tracker/bumper_in" to="bumper/obstacle_sectors" />

      <!-- MatlabTracker -->
      <rosparam ns="matlab_tracker" file="$(find mrs_trackers)/config/default/matlab_tracker.yaml" />
      <rosparam ns="matlab_tracker" file="$(find mrs_trackers)/config/$(arg RUN_TYPE)/$(arg UAV_TYPE)/matlab_tracker.yaml" />
      <rosparam if="$(eval not arg('custom_config_matlab_tracker') == '')" ns="matlab_tracker" file="$(arg custom_config_matlab_tracker)" />
      <param name="matlab_tracker/enable_profiler" type="bool" value="$(arg PROFILER)" />
      <remap from="~matlab_tracker/profiler" to="profiler" />
      <remap from="~matlab_tracker/goal_in" to="~matlab_tracker/goal" />

      <!-- SpeedTracker -->
      <rosparam ns="speed_tracker" file="$(find mrs_trackers)/config/default/speed_tracker.yaml" />
      <rosparam ns="speed_tracker" file="$(find mrs_trackers)/config/$(arg RUN_TYPE)/$(arg UAV_TYPE)/speed_tracker.yaml" />
      <rosparam if="$(eval not arg('custom_config_speed_tracker') == '')" ns="speed_tracker" file="$(arg custom_config_speed_tracker)" />
      <param name="speed_tracker/enable_profiler" type="bool" value="$(arg PROFILER)" />
      <remap from="~speed_tracker/profiler" to="profiler" />
      <remap from="~speed_tracker/command_in" to="~speed_tracker/command" />

      <!-- LandoffTracker -->
      <rosparam ns="landoff_tracker" file="$(find mrs_trackers)/config/default/landoff_tracker.yaml" />
      <rosparam ns="landoff_tracker" file="$(find mrs_trackers)/config/$(arg RUN_TYPE)/$(arg UAV_TYPE)/landoff_tracker.yaml" />
      <rosparam if="$(eval not arg('custom_config_landoff_tracker') == '')" ns="landoff_tracker" file="$(arg custom_config_landoff_tracker)" />
      <param name="landoff_tracker/enable_profiler" type="bool" value="$(arg PROFILER)" />
      <remap from="~landoff_tracker/profiler" to="profiler" />
      <remap from="~landoff_tracker/reset_lateral_odometry_out" to="odometry/reset_lateral_kalman" />
      <remap from="~landoff_tracker/land_in" to="~landoff_tracker/land" />
      <remap from="~landoff_tracker/eland_in" to="~landoff_tracker/eland" />
      <remap from="~landoff_tracker/takeoff_in" to="~landoff_tracker/takeoff" />
      <remap from="~landoff_tracker/diagnostics_out" to="~landoff_tracker/diagnostics" />

      <!-- MpcTracker -->
      <rosparam ns="mpc_tracker" file="$(find mrs_trackers)/config/default/mpc_tracker.yaml" />
      <rosparam ns="mpc_tracker" file="$(find mrs_trackers)/config/$(arg RUN_TYPE)/$(arg UAV_TYPE)/mpc_tracker.yaml" />
      <rosparam if="$(eval arg('RUN_TYPE') == 'uav')" ns="mpc_tracker" file="$(find mrs_general)/config/uav_names.yaml" />
      <rosparam if="$(eval arg('RUN_TYPE') == 'simulation')" ns="mpc_tracker" file="$(find mrs_general)/config/uav_names_simulation.yaml" />
      <rosparam if="$(eval not arg('custom_config_mpc_tracker') == '')" ns="mpc_tracker" file="$(arg custom_config_mpc_tracker)" />
      <rosparam if="$(eval not arg('custom_config_uav_names') == '')" ns="mpc_tracker" file="$(arg custom_config_uav_names)" />
      <param name="mpc_tracker/enable_profiler" type="bool" value="$(arg PROFILER)" />
      <param name="mpc_tracker/predicted_trajectory_topic" value="control_manager/mpc_tracker/predicted_trajectory" />
      <param name="mpc_tracker/diagnostics_topic" value="control_manager/mpc_tracker/diagnostics" />
      <param name="mpc_tracker/predicted_trajectory_esp_topic" value="control_manager/mpc_tracker/predicted_trajectory_esp" />
      <remap from="~mpc_tracker/profiler" to="profiler" />
      <remap from="~mpc_tracker/set_trajectory_in" to="~mpc_tracker/set_trajectory" />
      <remap from="~mpc_tracker/odometry_diagnostics_in" to="odometry/diagnostics" />
      <remap from="~mpc_tracker/start_trajectory_following_in" to="~mpc_tracker/start_trajectory_following" />
      <remap from="~mpc_tracker/stop_trajectory_following_in" to="~mpc_tracker/stop_trajectory_following" />
      <remap from="~mpc_tracker/resume_trajectory_following_in" to="~mpc_tracker/resume_trajectory_following" />
      <remap from="~mpc_tracker/fly_to_trajectory_start_in" to="~mpc_tracker/fly_to_trajectory_start" />
      <remap from="~mpc_tracker/set_mpc_matrix_in" to="~mpc_tracker/set_Q" />
      <remap from="~mpc_tracker/diagnostics_out" to="~mpc_tracker/diagnostics" />
      <remap from="~mpc_tracker/cmd_acceleration_out" to="~mpc_tracker/cmd_acceleration" />
      <remap from="~mpc_tracker/setpoint_odom_out" to="~mpc_tracker/setpoint_odom" />
      <remap from="~mpc_tracker/headless_in" to="~mpc_tracker/headless" />
      <remap from="~mpc_tracker/wiggle_in" to="~mpc_tracker/wiggle" />
      <remap from="~mpc_tracker/trajectory_original/poses_out" to="~mpc_tracker/trajectory_original/poses" />
      <remap from="~mpc_tracker/trajectory_original/markers_out" to="~mpc_tracker/trajectory_original/markers" />
      <remap from="~mpc_tracker/trajectory_processed/poses_out" to="~mpc_tracker/trajectory_processed/poses" />
      <remap from="~mpc_tracker/trajectory_processed/markers_out" to="~mpc_tracker/trajectory_processed/markers" />

      <!-- Subscribers -->
      <remap from="~odometry_in" to="odometry/odom_main" />
      <remap from="~uav_state_in" to="odometry/uav_state" />
      <remap from="~odometry_innovation_in" to="odometry/odom_main_innovation" />
      <remap from="~mavros_odometry_in" to="mavros_interface/converted_mavros_odom" />
      <remap from="~mavros_gps_in" to="mavros/global_position/global" />
      <remap from="~max_height_in" to="odometry/max_altitude" />
      <remap from="~joystick_in" to="/joy" />
      <remap from="~bumper_sectors_in" to="bumper/obstacle_sectors" />
      <remap from="~mavros_state_in" to="mavros/state" />
      <remap from="~rc_in" to="mavros/rc/in" />

      <!-- Subscribers and Services -->
      <remap from="~reference_in" to="~reference" />
      <remap from="~goto_in" to="~goto" />
      <remap from="~goto_fcu_in" to="~goto_fcu" />
      <remap from="~goto_relative_in" to="~goto_relative" />
      <remap from="~goto_altitude_in" to="~goto_altitude" />
      <remap from="~set_yaw_in" to="~set_yaw" />
      <remap from="~set_yaw_relative_in" to="~set_yaw_relative" />
      <remap from="~transform_reference_in" to="~transform_reference" />
      <remap from="~transform_pose_in" to="~transform_pose" />
      <remap from="~transform_vector3_in" to="~transform_vector3" />
      <remap from="~validate_reference_in" to="~validate_reference" />
      <remap from="~validate_reference_list_in" to="~validate_reference_list" />

      <!-- Publishers -->
      <remap from="~control_output_out" to="mavros/setpoint_raw/attitude" />
      <remap from="~cmd_odom_out" to="~cmd_odom" />
      <remap from="~position_cmd_out" to="~position_cmd" />
      <remap from="~attitude_cmd_out" to="~attitude_cmd" />
      <remap from="~control_error_out" to="~control_error" />
      <remap from="~tilt_error_out" to="~tilt_error" />
      <remap from="~thrust_force_out" to="~thrust_force" />
      <remap from="~motors_out" to="~motors" />
      <remap from="~mass_estimate_out" to="~mass_estimate" />
      <remap from="~safety_area_markers_out" to="~safety_area_markers" />
      <remap from="~safety_area_coordinates_markers_out" to="~safety_area_coordinates_markers" />
      <remap from="~disturbances_markers_out" to="~disturbances_markers" />
      <remap from="~diagnostics_out" to="~diagnostics" />
      <remap from="~bumper_status_out" to="~bumper_status" />
      <remap from="~mpc_trajectory_out" to="~mpc_tracker/set_trajectory" />
      <remap from="~current_constraints_out" to="~current_constraints" />
      <remap from="~profiler" to="profiler" />

      <!-- Services -->
      <remap from="~switch_tracker_in" to="~switch_tracker" />
      <remap from="~switch_controller_in" to="~switch_controller" />
      <remap from="~tracker_reset_static_in" to="~tracker_reset_static" />
      <remap from="~hover_in" to="~hover" />
      <remap from="~ehover_in" to="~ehover" />
      <remap from="~motors_in" to="~motors" />
      <remap from="~emergency_reference_in" to="~emergency_reference" />
      <remap from="~enable_callbacks_in" to="~enable_callbacks" />
      <remap from="~set_gains_out" to="gain_manager/set_gains" />
      <remap from="~set_constraints_in" to="~set_constraints" />
      <remap from="~use_joystick_in" to="~use_joystick" />
      <remap from="~arm_out" to="mavros/cmd/arming" />
      <remap from="~arm_in" to="~arm" />
      <remap from="~eland_in" to="~eland" />
      <remap from="~partial_land_in" to="~partial_land" />
      <remap from="~failsafe_in" to="~failsafe" />
      <remap from="~failsafe_escalating_in" to="~failsafe_escalating" />
      <remap from="~eland_out" to="~landoff_tracker/eland" />
      <remap from="~land_out" to="~landoff_tracker/land" />
      <remap from="~shutdown_out" to="~shutdown_out" />
      <remap from="~pirouette_in" to="~pirouette" />
      <remap from="~bumper_in" to="~bumper" />
      <remap from="~bumper_repulsion_in" to="~bumper_repulsion" />
      <remap from="~set_min_height_in" to="~set_min_height" />
      <remap from="~get_min_height_in" to="~get_min_height" />
      <remap from="~set_odometry_callbacks_out" to="odometry/toggle_callbacks" />

    </node>

  </group>

</launch>
